@page "/"

@using Webshop.Model;
@using Webshop.Sdk;

@inject ItemApi _itemApi;
@inject CartState _cartState;

@if (Items is null)
{
	<div>Loading...</div>
}
else
{
	<div class="container-fluid content-row">
		<div class="row">
			@foreach (var item in Items)
			{
				<div class="col-lg-3 col-md-6" style="margin-bottom: 20px;">
					<div class="card h-100" style="width: 20rem;">
                        <p style="text-align:center; margin-top: 20px">
							<img class="img-thumbnail" src="@item.ImageURL" alt="@item.ImageURL"
								height="250px" width="200px" />
						</p>								
						<div class="card-body text-center">
							<h5 class="card-title mb-3">
								<a href="/details/@item.Id">@item.Title</a>
							</h5>
							<p class="card-text">
								<b>@item.Price.ToString("C")</b>
								<br/>
								<br/>
								<b>Current stock: @item.CurrentInStock</b>
								<br />
								<br />
								<b>Quantity: @item.Quantity</b>
							</p>							
							<button class="btn btn-primary" type="button"
								@onclick="() => BuyItem(item)" disabled="@item.OutOfStock">
								@item.ButtonText
							</button>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}

@code {
	private IList<Item> Items { get; set; } = new List<Item>();

	protected override async Task OnInitializedAsync()
	{
		await LoadItems();
	}

	private async Task LoadItems()
	{
		Items = await _itemApi.FindAsync();
	}

	private async Task BuyItem(Item item)
	{
		await _cartState.AddItemToBasket(item);
		await LoadItems();
	}
}